{
  "compilerOptions": {
    // 해당하는 선언파일(.d.ts) 파일을 생성
    "declaration": true,
    // 컴파일 시 생성되는 자바스크립트의 버전
    "target": "es6",
    // 컴파일 시 포함될 라이브러리 목록
    "lib": ["dom", "dom.iterable", "esnext"],
    // 절대경로(비 상대적 모듈)의 모듈 이름을 해석하기 위한 기본 디렉터리
    "baseUrl": "./src",
    // 자바스크립트 파일도 컴파일에 포함 시킬것인가
    "allowJs": true,
    // 모든 선언 파일(*.d.ts)의 타입 검사를 건너 뜀
    "skipLibCheck": true,
    // default export가 없는 모듈이더라도 default export가 있는 모듈인 것 처럼 default import로 불러와 사용 가능한가 ( allowSyntheticDefaultImports랑 같게 설정. true로 그냥 설정해두자)
    "esModuleInterop": true,
    // default export가 없는 모듈에서 import XXX를 사용할 수 있게 할 것인가 (타입 체크 용)
    "allowSyntheticDefaultImports": true,
    // 엄격한 타입 검사 옵션을 활성화
    "strict": false,
    // 동일한 파일 참조에 대해 일관성 없는 대소문자를 비활성화
    "forceConsistentCasingInFileNames": true,
    // 스위치 문에 fallthrough 케이스에 대한 오류를 보고(switch문에서 case를 연속적으로 실행)
    "noFallthroughCasesInSwitch": true,
    // 모듈 코드 생성 지정. 컴파일을 마친 자바스크립트 모듈이 어떤 모듈 시스템을 사용할 지.
    "module": "CommonJS",
    // 모듈 해석 방법 결정(컴파일러가 import가 무엇을 참조하는지 알아내기 위해 사용하는 프로세스)
    "moduleResolution": "node",
    // .json 확장자로 import된 모듈을 포함
    "resolveJsonModule": true,
    // 각 파일을 분리된 모듈로 분리(트랜스파일링)
    "isolatedModules": true,
    // .tsx파일에서 jsx지원을 하는지. 'react'는 최상단에 React를 import 해야하는데 react-jsx는 안해주어도 됨.
    "jsx": "react-jsx",
    // baseUrl을 기준으로 관련된 위치에 모듈 이름의 경로 매핑 목록을 나열 "사용하려는 경로" : ["baseUrl을 기준으로 사용하려는 경로"]
    "paths": {
      "components/*":["components/*"]
    },
    // 생성된 선언 파일의 출력 디렉토리
    "declarationDir": "./dist",
    // js파일이 만들어질 때의 경로
    "outDir": "./dist"
  },
  // 변환할 폴더 지정
  "include": ["src/**/*", "./setupTest.ts"],
  "exclude": ["node_modules","dist"]
}
